#!/bin/bash
#
#
# git-flow -- A collection of Git extensions to provide high-level
# repository operations for Vincent Driessen's branching model.
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_gitflow_initialized
gitflow_load_settings

cmd_default() {
    require_clean_working_tree
    
    local current=$(git_current_branch)
    
    flow_do "Fetching $ORIGIN" "" fetch --prune -q "$ORIGIN"

    if [ "$1" != "" ]; then
      if has "$1" $(git_local_branches); then
        sync_branch "$1"
        local_only_branch "$1" "force"
      else
        sync_branch_down "$ORIGIN/$1" "force"
      fi
    else
      flow_branches=$(echo "$(git_local_branches)" | egrep "^(feature|release|hotfix)/")
  
      echo
      echo "=== TRACKING BRANCHES ==="
      sync_branch "$DEVELOP_BRANCH" "nopush" "--first-parent"
      sync_branch "$PRODUCTION_BRANCH" "nopush" "--first-parent"
      for branch in $flow_branches; do
        sync_branch "$branch" "listfirst"
      done
      
      echo
      echo "=== LOCAL ONLY BRANCHES ==="
      for branch in $flow_branches; do
        local_only_branch "$branch"
      done
      
      echo
      echo "=== REMOTE ONLY BRANCHES ==="
      remote_flow_branches=$(echo "$(git_remote_branches)" | egrep "^$ORIGIN/(feature|release|hotfix)/")
      for branch in $remote_flow_branches; do
      	sync_branch_down $branch
      done
      
      git checkout "$current" > /dev/null 2>&1
    fi
    
}

