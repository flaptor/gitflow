#!/bin/bash
#
# git-flow -- A collection of Git extensions to provide high-level
# repository operations for Vincent Driessen's branching model.
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

#
# Common functionality
#

# shell output
warn() { echo "$@" >&2; }
die() { warn "$@"; warn "For more details run git flow log"; exit 1; }

escape() {
	echo "$1" | sed 's/\([\.\+\$\*]\)/\\\1/g'
}

# set logic
has() {
	local item=$1; shift
	echo " $@ " | grep -q " $(escape $item) "
}

# basic math
min() { [ "$1" -le "$2" ] && echo "$1" || echo "$2"; }
max() { [ "$1" -ge "$2" ] && echo "$1" || echo "$2"; }

# basic string matching
startswith() { [ "$1" != "${1#$2}" ]; }
endswith() { [ "$1" != "${1%$2}" ]; }

# convenience functions for checking shFlags flags
flag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -eq $FLAGS_TRUE ]; }
noflag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -ne $FLAGS_TRUE ]; }

#
# Git specific common functionality
#

start_msg() {
    echo -en "\033[01;33m[+]\033[00m $1... "
}
end_msg_success() {
    echo -e "\033[01;32m$1\033[00m"
}
end_msg_warn() {
	echo -e "\033[01;33m$1\033[00m" 
}
end_msg_failure() {
	echo -e "\033[01;31m$1\033[00m" 
}
start_msg_success() {
    echo -en "\033[01;33m[+]\033[00m \033[01;32m$1\033[00m "
}
start_msg_warn() {
    echo -en "\033[01;33m[+]\033[00m \033[01;33m$1\033[00m "
}
start_msg_failure() {
    echo -en "\033[01;33m[+]\033[00m \033[01;31m$1\033[00m "
}
start_msg_info() {
    echo -en "\033[01;33m[+]\033[00m \033[01;34m$1\033[00m "
}
end_msg() {
	echo -e "$1" 
}

silent_do() {
  echo -e "\033[01;33m>>> git $@\033[00m" >> $LOGFILE
  git --no-pager "$@" >> $LOGFILE 2>&1
  if [ $? -ne 0 ]; then
    start_msg_failure "Failed to execute git $@"
  	die "Aborted"
  fi
}
flow_do() {
	local message="$1"
	local error_msg="$2"
	shift 2
	start_msg "$message"
    echo >> $LOGFILE
    echo -e "\033[01;33m>>> git --no-pager $@\033[00m" >> $LOGFILE
    git "$@" >> $LOGFILE 2>&1
    if [ $? -ne 0 ]; then
	    end_msg_failure "FAILED"
    	die "$error_msg"
    fi
    end_msg_success "OK"
}

git_local_branches() { git branch --no-color | sed 's/^[* ] //'; }
git_remote_branches() { git branch -r --no-color | sed 's/^[* ] //'; }
git_all_branches() { ( git branch --no-color; git branch -r --no-color) | sed 's/^[* ] //'; }
git_all_tags() { git tag; }

git_current_branch() {
	git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

git_author() {
	git log --format=format:%an -1 "$1" 
}

git_is_clean_working_tree() {
	if ! git diff --no-ext-diff --ignore-submodules --quiet --exit-code; then
		return 1
	elif ! git diff-index --cached --quiet --ignore-submodules HEAD --; then
		return 2
	else
		return 0
	fi
}

git_repo_is_headless() {
	! git rev-parse --quiet --verify HEAD >/dev/null 2>&1
}

git_local_branch_exists() {
	has $1 $(git_local_branches)
}

git_branch_exists() {
	has $1 $(git_all_branches)
}

git_tag_exists() {
	has $1 $(git_all_tags)
}

#
# git_compare_branches()
#
# Tests whether branches and their "origin" counterparts have diverged and need
# merging first. It returns error codes to provide more detail, like so:
#
# 0    Branch heads point to the same commit
# 1    First given branch needs fast-forwarding
# 2    Second given branch needs fast-forwarding
# 3    Branch needs a real merge
# 4    There is no merge base, i.e. the branches have no common ancestors
#
git_compare_branches() {
	local commit1=$(git rev-parse "$1")
	local commit2=$(git rev-parse "$2")
	if [ "$commit1" != "$commit2" ]; then
		local base=$(git merge-base "$commit1" "$commit2")
		if [ $? -ne 0 ]; then
			return 4
		elif [ "$commit1" = "$base" ]; then
			return 1
		elif [ "$commit2" = "$base" ]; then
			return 2
		else
			return 3
		fi
	else
		return 0
	fi
}

#
# git_is_branch_merged_into()
#
# Checks whether branch $1 is succesfully merged into $2
#
git_is_branch_merged_into() {
	local subject=$1
	local base=$2
	local all_merges="$(git branch --no-color --contains $subject | sed 's/^[* ] //')"
	has $base $all_merges
}

#
# gitflow specific common functionality
#

# check if this repo has been inited for gitflow
gitflow_has_master_configured() {
	local master=$(git config --get gitflow.branch.master)
	[ "$master" != "" ] && git_local_branch_exists "$master"
}

gitflow_has_develop_configured() {
	local develop=$(git config --get gitflow.branch.develop)
	[ "$develop" != "" ] && git_local_branch_exists "$develop"
}

gitflow_has_prefixes_configured() {
	git config --get gitflow.prefix.feature >/dev/null 2>&1     && \
	git config --get gitflow.prefix.release >/dev/null 2>&1     && \
	git config --get gitflow.prefix.hotfix >/dev/null 2>&1      && \
	git config --get gitflow.prefix.support >/dev/null 2>&1     && \
	git config --get gitflow.prefix.versiontag >/dev/null 2>&1
}

gitflow_is_initialized() {
	gitflow_has_master_configured                    && \
	gitflow_has_develop_configured                   && \
	[ "$(git config --get gitflow.branch.master)" !=    \
	  "$(git config --get gitflow.branch.develop)" ] && \
	gitflow_has_prefixes_configured
}

# loading settings that can be overridden using git config
gitflow_load_settings() {
	export DOT_GIT_DIR=$(git rev-parse --git-dir )
	export PRODUCTION_BRANCH=$(git config --get gitflow.branch.master)
	export DEVELOP_BRANCH=$(git config --get gitflow.branch.develop)
	export ORIGIN=$(git config --get gitflow.origin || echo origin)
    export LOGFILE="$DOT_GIT_DIR/git-flow.log"
    echo "" > $LOGFILE
}

#
# gitflow_resolve_nameprefix
#
# Inputs:
# $1 = name prefix to resolve
# $2 = branch prefix to use
#
# Searches branch names from git_local_branches() to look for a unique
# branch name whose name starts with the given name prefix.
#
# There are multiple exit codes possible:
# 0: The unambiguous full name of the branch is written to stdout
#    (success)
# 1: No match is found.
# 2: Multiple matches found. These matches are written to stderr
#
gitflow_resolve_nameprefix() {
	local name=$1
	local prefix=$2
	local matches
	local num_matches

	# first, check if there is a perfect match
	if git_local_branch_exists "$prefix$name"; then
		echo "$name"
		return 0
	fi

	matches=$(echo "$(git_local_branches)" | grep "^$(escape "$prefix$name")")
	num_matches=$(echo "$matches" | wc -l)
	if [ -z "$matches" ]; then
		# no prefix match, so take it literally
		warn "No branch matches prefix '$name'"
		return 1
	else
		if [ $num_matches -eq 1 ]; then
			echo "${matches#$prefix}"
			return 0
		else
			# multiple matches, cannot decide
			warn "Multiple branches match prefix '$name':"
			for match in $matches; do
				warn "- $match"
			done
			return 2
		fi
	fi
}

#
# Assertions for use in git-flow subcommands
#

require_git_repo() {
	if ! git rev-parse --git-dir >/dev/null 2>&1; then
		die "fatal: Not a git repository"
	fi
}

require_gitflow_initialized() {
	if ! gitflow_is_initialized; then
		die "fatal: Not a gitflow-enabled repo yet. Please run \"git flow init\" first."
	fi
}

require_clean_working_tree() {
	git_is_clean_working_tree
	local result=$?
	if [ $result -eq 1 ]; then
		die "fatal: Working tree contains unstaged changes. Aborting."
	fi
	if [ $result -eq 2 ]; then
		die "fatal: Index contains uncommited changes. Aborting."
	fi
}

require_local_branch() {
	if ! git_local_branch_exists $1; then
		die "fatal: Local branch '$1' does not exist and is required."
	fi
}

require_remote_branch() {
	if ! has $1 $(git_remote_branches); then
		die "Remote branch '$1' does not exist and is required."
	fi
}

require_branch() {
	if ! has $1 $(git_all_branches); then
		die "Branch '$1' does not exist and is required."
	fi
}

require_branch_absent() {
	if has $1 $(git_all_branches); then
		die "Branch '$1' already exists. Pick another name."
	fi
}

require_tag_absent() {
	if has $1 $(git_all_tags); then
		die "Tag '$1' already exists. Pick another name."
	fi
}

require_branches_equal() {
	require_local_branch "$1"
	require_remote_branch "$2"
	git_compare_branches "$1" "$2"
	local status=$?
	if [ $status -gt 0 ]; then
		warn "Branches '$1' and '$2' have diverged."
		if [ $status -eq 1 ]; then
			die "And branch '$1' may be fast-forwarded."
		elif [ $status -eq 2 ]; then
			# Warn here, since there is no harm in being ahead
			warn "And local branch '$1' is ahead of '$2'."
		else
			die "Branches need merging first."
		fi
	fi
}

list_changes() {
  git --no-pager log --reverse $3 --pretty=format:"                        %C(blue)\__ <- %Creset%s  %C(cyan)%an%Creset %cr %Cred%h%Creset" "$1..$2"
}
list_changes_up() {
  git --no-pager log --reverse $3 --pretty=format:"                        %C(red)\__ -> %Creset%s  %C(cyan)%an%Creset %cr %Cred%h%Creset" "$1..$2"
}

sync_branch() {
    local BR="\033[01;34m$1\033[00m"
    local author="\033[01;36m"$(git_author "$1")"\033[00m"
    local commit=$(git rev-parse --short "$1")
    if has "$ORIGIN/$1" $(git_all_branches); then
        git_compare_branches "$1" "$ORIGIN/$1"
        local status=$?
        local rauthor="\033[01;36m"$(git_author "$ORIGIN/$1")"\033[00m"
        local rcommit=$(git rev-parse --short "$ORIGIN/$1")
        if [ $status -eq 0 ]; then
            start_msg_success      "  <synchronized> "
            end_msg "$BR  $author";
        fi
        if [ $status -gt 2 ]; then
            start_msg_failure "    <diverged>   "
            end_msg "$BR  $author <-> $rauthor  \033[01;31m$commit..$rcommit\033[00m";
            list_changes "$1" "$ORIGIN/$1" "$3"
            list_changes_up "$ORIGIN/$1" "$1" "$3"
            echo
            return 1
        fi
        if [ $status -eq 1 ]; then
          start_msg_warn "    <- pulling   "
            end_msg "$BR  $author <- $rauthor  \033[01;31m$commit..$rcommit\033[00m";
            list_changes "$1" "$ORIGIN/$1" "$3"
            echo
            silent_do checkout "$1"
            silent_do merge --ff-only "$ORIGIN/$1"
        fi
        if [ $status -eq 2 ]; then
        	if [ "$2" = "nopush" ]; then
	            start_msg_success " <local changes> "
	            end_msg "$BR  $author -> $rauthor  \033[01;31m$rcommit..$commit\033[00m";
	            list_changes_up "$ORIGIN/$1" "$1" "$3"
	            echo
        	else
	            start_msg_warn "    pushing ->   "
	            end_msg "$BR  $author -> $rauthor  \033[01;31m$rcommit..$commit\033[00m";
	            list_changes_up "$ORIGIN/$1" "$1" "$3"
	            echo
	            silent_do push "$ORIGIN" "$1"
            fi
            
        fi
      fi
}

local_only_branch() {
    local BR="\033[01;34m$1\033[00m"
    local author="\033[01;36m"$(git_author "$1")"\033[00m"
    local commit=$(git rev-parse --short "$1")
    if ! has "$ORIGIN/$1" $(git_all_branches); then
        if git_is_branch_merged_into "$1" "$PRODUCTION_BRANCH"; then
            start_msg_failure " already @ prod  "
        elif git_is_branch_merged_into "$1" "$DEVELOP_BRANCH"; then
            start_msg_failure " already @ master"
        else
            if [ "$2" != "" ]; then
              start_msg_warn "  publishing ->  "
              end_msg "$BR  $author -> new  \033[01;31m$commit\033[00m";
              silent_do push "$ORIGIN" "$1"            
            else
              start_msg_success    "   <still open>  "
            fi
        fi
        end_msg "$BR";
    fi
}

sync_branch_down() {
    local local_branch=`echo "$1" | cut -d "/" -f 2-`
    local rauthor="\033[01;36m"$(git_author "$1")"\033[00m"
    local rcommit=$(git rev-parse --short "$1")
    if ! has "$local_branch" $(git_all_branches); then
        if git_is_branch_merged_into "$1" "$PRODUCTION_BRANCH"; then
            start_msg_failure " already @ prod  "
        elif git_is_branch_merged_into "$1" "$DEVELOP_BRANCH"; then
            start_msg_failure " already @ master"
        else
            if [ "$2" != "" ]; then
              start_msg_warn "    <- tracking  "
              end_msg "$local_branch  new <- $rauthor  \033[01;31m$rcommit\033[00m";
              silent_do checkout -b "$local_branch" "$1"
              return            
            else
              start_msg_success    "   <still open>  "
            fi
        fi
        end_msg "\033[01;34m$local_branch\033[00m  $rauthor";
    fi
}

